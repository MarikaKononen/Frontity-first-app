{"version":3,"file":"fast-stringify.js","sources":["../src/utils.js","../src/index.js"],"sourcesContent":["/**\n * @function first\n *\n * @description\n * get the first n number of items from the array as a new array (faster than native splice)\n *\n * @param {Array<any>} array the array to get the items from\n * @param {number} length the length to limit the size to\n * @returns {Array<any>} the array limited in size\n */\nexport const first = (array, length) => {\n  const newArray = new Array(length);\n\n  for (let index = 0; index < length; index++) {\n    newArray[index] = array[index];\n  }\n\n  return newArray;\n};\n\n/**\n * @function getCircularValue\n *\n * @description\n * create a method that will get a placeholder for the circular value based\n * on the value saved in the cache for it\n *\n * @param {any} key the key of the object to stringify\n * @param {any} value the value of the object at key\n * @param {number} refCount the index of the ref\n * @returns {string} the circular value\n */\nexport const getCircularValue = (key, value, refCount) => `[ref-${refCount}]`;\n\n/**\n * @function getValue\n *\n * @description\n * get the value passed (similar to an identity function)\n *\n * @param {any} key the key of the object to stringify\n * @param {any} value the value of the object at key\n * @returns {any} the value passed\n */\nexport const getValue = (key, value) => value;\n\n/**\n * @function indexOf\n *\n * @description\n * get the index of the value in the array (faster than native indexOf)\n *\n * @param {Array<any>} array the array to get the index of the value at\n * @param {any} value the value to match\n * @returns {number} the index of the value in array\n */\nexport const indexOf = (array, value) => {\n  for (let index = 0; index < array.length; index++) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * @function createReplacer\n *\n * @description\n * create a replacer method that handles circular values\n *\n * @param {function} [replacer] a custom replacer to use for non-circular values\n * @param {function} [circularReplacer] a custom replacer to use for circular methods\n * @returns {any} the value to stringify\n */\nexport const createReplacer = (replacer, circularReplacer) => {\n  const getCircularReplacer = circularReplacer || getCircularValue;\n  const hasReplacer = typeof replacer === 'function';\n\n  let cache = [],\n      locationOfThis,\n      locationOfValue;\n\n  return function(key, value) {\n    if (cache.length) {\n      locationOfThis = indexOf(cache, this);\n\n      if (~locationOfThis) {\n        cache = first(cache, locationOfThis + 1);\n      } else {\n        cache[cache.length] = this;\n      }\n\n      locationOfValue = indexOf(cache, value);\n\n      if (~locationOfValue) {\n        return getCircularReplacer.call(this, key, value, locationOfValue);\n      }\n    } else {\n      cache[0] = value;\n    }\n\n    return hasReplacer ? replacer.call(this, key, value) : value;\n  };\n};\n","// utils\nimport {createReplacer} from './utils';\n\n/**\n * @function stringify\n *\n * @description\n * strinigifer that handles circular values\n *\n * @param {any} value the value to stringify\n * @param {function} [replacer] a custom replacer function for stringifying standard values\n * @param {number} [indent] the number of spaces to indent the output by\n * @param {function} [circularReplacer] a custom replacer function for stringifying circular values\n * @returns {string} the stringified output\n */\nexport default function stringify(value, replacer, indent, circularReplacer) {\n  return JSON.stringify(value, createReplacer(replacer, circularReplacer), indent);\n}\n"],"names":["first","array","length","newArray","Array","index","getCircularValue","key","value","refCount","indexOf","createReplacer","replacer","circularReplacer","locationOfThis","locationOfValue","cache","call","stringify","indent","JSON"],"mappings":";;;;;;EAAA;;;;;;;;;KAUA,IAAaA,KAAK,CAAG,SAACC,CAAD,CAAQC,CAAR,CAAmB,CAGtC,QAFMC,CAAQ,CAAOC,KAAP,CAAaF,CAAb,CAEd,CAASG,CAAK,CAAG,CAAjB,CAAoBA,CAAK,CAAGH,CAA5B,CAAoCG,CAAK,EAAzC,CACEF,CAAQ,CAACE,CAAD,CAAR,CAAkBJ,CAAK,CAACI,CAAD,CAAvB,CAGF,OAAOF,CACR,CARM,CAUP;;;;;;;;;;;KAYA,IAAaG,gBAAgB,CAAG,SAACC,CAAD,CAAMC,CAAN,CAAaC,CAAb,iBAAkCA,CAAlC,KAAzB,CAEP,AAYA;;;;;;;;;KAUA,IAAaC,OAAO,CAAG,SAACT,CAAD,CAAQO,CAAR,CAAkB,CACvC,IAAK,IAAIH,CAAK,CAAG,CAAjB,CAAoBA,CAAK,CAAGJ,CAAK,CAACC,MAAlC,CAA0CG,CAAK,EAA/C,CACE,GAAIJ,CAAK,CAACI,CAAD,CAAL,GAAiBG,CAArB,CACE,OAAOH,CAAP,CAIJ,OAAO,CAAC,CACT,CARM,CAUP;;;;;;;;;KAUA,IAAaM,cAAc,CAAG,SAACC,CAAD,CAAWC,CAAX,CAAgC,KAKxDC,CALwD,CAMxDC,CANwD,CAIxDC,CAAK,CAAG,EAJgD,CAQ5D,gBAAgBT,CAAT,CAAcC,CAAd,CAAqB,CAC1B,IAAIQ,CAAK,CAACd,MAAV,CAeEc,CAAK,CAAC,CAAD,CAAL,CAAWR,CAfb,SACEM,CAAc,CAAGJ,OAAO,CAACM,CAAD,CAAQ,IAAR,CAUxB,CARI,CAACF,CAQL,CAPEE,CAAK,CAAGhB,KAAK,CAACgB,CAAD,CAAQF,CAAc,CAAG,CAAzB,CAOf,CALEE,CAAK,CAACA,CAAK,CAACd,MAAP,CAAL,CAAsB,IAKxB,CAFAa,CAAe,CAAGL,OAAO,CAACM,CAAD,CAAQR,CAAR,CAEzB,CAAI,CAACO,CAAL,CACE,OAAO,CApBeF,CAAgB,EAAIP,gBAoBnC,EAAoBW,IAApB,CAAyB,IAAzB,CAA+BV,CAA/B,CAAoCC,CAApC,CAA2CO,CAA3C,CAAP,CAMJ,OAzBsC,UAApB,SAAOH,CAyBlB,CAAcA,CAAQ,CAACK,IAAT,CAAc,IAAd,CAAoBV,CAApB,CAAyBC,CAAzB,CAAd,CAAgDA,CACxD,CACF,CA7BM;;EC5EP;AACA,EAEA;;;;;;;;;;;KAYA,SAAwBU,SAAT,CAAmBV,CAAnB,CAA0BI,CAA1B,CAAoCO,CAApC,CAA4CN,CAA5C,CAA8D,CAC3E,OAAOO,IAAI,CAACF,SAAL,CAAeV,CAAf,CAAsBG,cAAc,CAACC,CAAD,CAAWC,CAAX,CAApC,CAAkEM,CAAlE,CACR;;;;;;;;;;;;"}