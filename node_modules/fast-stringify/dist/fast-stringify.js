(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.fastCopy = {})));
}(this, (function (exports) { 'use strict';

  /**
   * @function first
   *
   * @description
   * get the first n number of items from the array as a new array (faster than native splice)
   *
   * @param {Array<any>} array the array to get the items from
   * @param {number} length the length to limit the size to
   * @returns {Array<any>} the array limited in size
   */var first=function(a,b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c};/**
   * @function getCircularValue
   *
   * @description
   * create a method that will get a placeholder for the circular value based
   * on the value saved in the cache for it
   *
   * @param {any} key the key of the object to stringify
   * @param {any} value the value of the object at key
   * @param {number} refCount the index of the ref
   * @returns {string} the circular value
   */var getCircularValue=function(a,b,c){return "[ref-"+c+"]"};/**
   * @function indexOf
   *
   * @description
   * get the index of the value in the array (faster than native indexOf)
   *
   * @param {Array<any>} array the array to get the index of the value at
   * @param {any} value the value to match
   * @returns {number} the index of the value in array
   */var indexOf=function(a,b){for(var c=0;c<a.length;c++)if(a[c]===b)return c;return -1};/**
   * @function createReplacer
   *
   * @description
   * create a replacer method that handles circular values
   *
   * @param {function} [replacer] a custom replacer to use for non-circular values
   * @param {function} [circularReplacer] a custom replacer to use for circular methods
   * @returns {any} the value to stringify
   */var createReplacer=function(a,b){var c,d,e=[];return function(f,g){if(!e.length)e[0]=g;else if(c=indexOf(e,this),~c?e=first(e,c+1):e[e.length]=this,d=indexOf(e,g),~d)return (b||getCircularValue).call(this,f,g,d);return "function"==typeof a?a.call(this,f,g):g}};

  // utils
  /**
   * @function stringify
   *
   * @description
   * strinigifer that handles circular values
   *
   * @param {any} value the value to stringify
   * @param {function} [replacer] a custom replacer function for stringifying standard values
   * @param {number} [indent] the number of spaces to indent the output by
   * @param {function} [circularReplacer] a custom replacer function for stringifying circular values
   * @returns {string} the stringified output
   */function stringify(a,b,c,d){return JSON.stringify(a,createReplacer(b,d),c)}

  exports.default = stringify;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=fast-stringify.js.map
