'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * @constant __ placeholder used when parameters are skipped
 */
var __ = typeof Symbol === 'function' ? Symbol('curriable placeholder') : 0xedd1;
/**
 * @function recursiveCurry
 *
 * @description
 * recursively curry over the arguments until all have been resolved
 *
 * @param fn the function to curry
 * @param arity the length of the function to curry until
 * @param args the existing arguments
 * @returns the result of the function call
 */
var recursiveCurry = function (fn, arity, args) {
    return function () {
        var length = args.length;
        var newArgs = arguments;
        var newArgsLength = newArgs.length;
        var combined = [];
        var newArgsIndex = 0;
        var remaining = arity;
        var value;
        if (length) {
            for (var index = 0; index < length; index++) {
                combined[index] = value =
                    args[index] === __ && newArgsIndex < newArgsLength
                        ? newArgs[newArgsIndex++]
                        : args[index];
                if (value !== __) {
                    --remaining;
                }
            }
        }
        if (newArgsIndex < newArgsLength) {
            for (; newArgsIndex < newArgsLength; newArgsIndex++) {
                combined[combined.length] = value = newArgs[newArgsIndex];
                if (value !== __ && newArgsIndex < arity) {
                    --remaining;
                }
            }
        }
        return remaining > 0
            ? recursiveCurry(fn, arity, combined)
            : fn.apply(this, combined);
    };
};

// utils
/**
 * @function curry
 *
 * @description
 * get the method passed as a curriable method based on its parameters
 *
 * @param fn the method to make curriable
 * @param arity the arity of the curried method
 * @returns the fn passed as a curried function
 */
var curry = function (fn, arity) {
    if (arity === void 0) { arity = fn.length; }
    var curried = recursiveCurry(fn, arity, []);
    curried.arity = arity;
    curried.fn = fn;
    return curried;
};
curry.__ = __;
/**
 * @function uncurry
 *
 * @description
 * return a function that is the non-curried version of the fn passed
 *
 * @param curried the curried function to uncurry
 * @returns the original fn
 */
var uncurry = function (curried) { return curried.fn; };
curry.uncurry = uncurry;

exports.__ = __;
exports.curry = curry;
exports.uncurry = uncurry;
exports.default = curry;
//# sourceMappingURL=curriable.cjs.js.map
