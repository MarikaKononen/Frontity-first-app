"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("./utils/envs");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const file_settings_1 = require("@frontity/file-settings");
const entry_points_1 = __importDefault(require("./utils/entry-points"));
const config_1 = __importDefault(require("../config"));
const frontity_1 = __importDefault(require("../config/frontity"));
const clean_build_folders_1 = __importDefault(require("./utils/clean-build-folders"));
const webpack_1 = require("./utils/webpack");
exports.default = async ({ mode, target }) => {
    console.log(`mode: ${mode}\n`);
    // Get config from frontity.config.js files.
    const frontityConfig = frontity_1.default();
    const { outDir } = frontityConfig;
    // Create the directories if they don't exist. Clean them if they do.
    await clean_build_folders_1.default({ outDir });
    // Get all sites configured in frontity.settings.js with their packages.
    const sites = await file_settings_1.getAllSites();
    // Generate the bundles. One for the server, one for each client site.
    const entryPoints = await entry_points_1.default({ sites, outDir, mode });
    // Get FrontityConfig for Webpack.
    const config = config_1.default({ mode, entryPoints });
    // Build and wait until webpack finished the clients first.
    // We need to do this because the server bundle needs to import
    // the client chunks.x.json, which are created by the clients.
    //
    // If target is both or es5, build the es5 bundle.
    if (target !== "module") {
        console.log("Building es5 bundle");
        await webpack_1.webpackAsync(config.webpack.es5);
    }
    // If target is both or module, build the module bundle.
    if (target !== "es5") {
        console.log("Building module bundle");
        await webpack_1.webpackAsync(config.webpack.module);
    }
    console.log("Building server bundle");
    await webpack_1.webpackAsync(config.webpack.server);
    console.log();
    // Remove the bundling folder after the build in production because
    // it is not needed anymore.
    if (mode === "production")
        await fs_extra_1.remove(path_1.join(outDir, "bundling"));
};
