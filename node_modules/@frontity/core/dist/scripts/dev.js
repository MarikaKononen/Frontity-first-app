"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("./utils/envs");
const webpack_1 = __importDefault(require("webpack"));
const webpack_dev_middleware_1 = __importDefault(require("webpack-dev-middleware"));
const webpack_hot_middleware_1 = __importDefault(require("webpack-hot-middleware"));
const file_settings_1 = require("@frontity/file-settings");
const create_app_1 = __importDefault(require("./utils/create-app"));
const hot_server_1 = __importDefault(require("./utils/hot-server"));
const entry_points_1 = __importDefault(require("./utils/entry-points"));
const config_1 = __importDefault(require("../config"));
const frontity_1 = __importDefault(require("../config/frontity"));
const clean_build_folders_1 = __importDefault(require("./utils/clean-build-folders"));
const webpack_2 = require("./utils/webpack");
// Start Frontity development environment.
exports.default = async ({ isHttps, mode, port, target }) => {
    // Get config from frontity.config.js files.
    const frontityConfig = frontity_1.default();
    const { outDir } = frontityConfig;
    // Create the directories if they don't exist, clean them if they do.
    await clean_build_folders_1.default({ outDir });
    // Get all sites configured in frontity.settings.js with their packages.
    const sites = await file_settings_1.getAllSites();
    // Generate the bundles. One for the server, one for each client site.
    const entryPoints = await entry_points_1.default({ sites, outDir, mode });
    // Start dev using webpack dev server with express.
    const { app, done } = await create_app_1.default({ mode, port, isHttps, target });
    // Get config for webpack, babel and frontity.
    const config = config_1.default({ mode, entryPoints });
    // Build and wait until webpack finished the client first.
    // We need to do this because the server bundle needs to import
    // the client loadable-stats, which are created by the client Webpack.
    const clientWebpack = target === "es5" ? config.webpack.es5 : config.webpack.module;
    await webpack_2.webpackAsync(clientWebpack);
    // Start a custom webpack-dev-server.
    const compiler = webpack_1.default([clientWebpack, config.webpack.server]);
    app.use(webpack_dev_middleware_1.default(compiler, {
        publicPath: clientWebpack.output.publicPath,
        writeToDisk: true,
        stats: {
            all: false,
            hash: false,
            assets: true,
            colors: true,
            errors: true,
            warnings: true,
            errorDetails: true,
            excludeAssets: /chunks\..*?\.json/
        }
    }));
    app.use(webpack_hot_middleware_1.default(compiler.compilers[0]));
    app.use(hot_server_1.default(compiler));
    // Start listening once webpack finishes.
    done(compiler);
};
