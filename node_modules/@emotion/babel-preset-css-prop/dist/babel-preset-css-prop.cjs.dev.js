'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _objectAssign = _interopDefault(require('object-assign'));
var jsx = _interopDefault(require('@babel/plugin-transform-react-jsx'));
var pragmatic = _interopDefault(require('@emotion/babel-plugin-jsx-pragmatic'));
var emotion = _interopDefault(require('babel-plugin-emotion'));

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var pragmaName = '___EmotionJSX'; // pull out the emotion options and pass everything else to the jsx transformer
// this means if @babel/plugin-transform-react-jsx adds more options, it'll just work
// and if babel-plugin-emotion adds more options we can add them since this lives in
// the same repo as babel-plugin-emotion

var index = (function (api, _ref) {
  if (_ref === void 0) {
    _ref = {};
  }

  var _ref2 = _ref,
      pragma = _ref2.pragma,
      sourceMap = _ref2.sourceMap,
      autoLabel = _ref2.autoLabel,
      labelFormat = _ref2.labelFormat,
      instances = _ref2.instances,
      options = _objectWithoutPropertiesLoose(_ref2, ["pragma", "sourceMap", "autoLabel", "labelFormat", "instances"]);

  return {
    plugins: [[pragmatic, {
      export: 'jsx',
      module: '@emotion/core',
      import: pragmaName
    }], [jsx, _objectAssign({
      pragma: pragmaName,
      pragmaFrag: 'React.Fragment'
    }, options)], [emotion, {
      sourceMap: sourceMap,
      autoLabel: autoLabel,
      labelFormat: labelFormat,
      instances: instances,
      cssPropOptimization: true
    }]]
  };
});

exports.default = index;
