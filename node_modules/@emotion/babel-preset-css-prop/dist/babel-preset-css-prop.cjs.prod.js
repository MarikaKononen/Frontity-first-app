"use strict";
function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}
Object.defineProperty(exports, "__esModule", { value: !0 });
var _objectAssign = _interopDefault(require("object-assign")),
  jsx = _interopDefault(require("@babel/plugin-transform-react-jsx")),
  pragmatic = _interopDefault(require("@emotion/babel-plugin-jsx-pragmatic")),
  emotion = _interopDefault(require("babel-plugin-emotion"));
function _objectWithoutPropertiesLoose(source, excluded) {
  if (null == source) return {};
  var key,
    i,
    target = {},
    sourceKeys = Object.keys(source);
  for (i = 0; i < sourceKeys.length; i++)
    (key = sourceKeys[i]),
      0 <= excluded.indexOf(key) || (target[key] = source[key]);
  return target;
}
var pragmaName = "___EmotionJSX",
  index = function(api, _ref) {
    void 0 === _ref && (_ref = {});
    var _ref2 = _ref,
      sourceMap = (_ref2.pragma, _ref2.sourceMap),
      autoLabel = _ref2.autoLabel,
      labelFormat = _ref2.labelFormat,
      instances = _ref2.instances,
      options = _objectWithoutPropertiesLoose(_ref2, [
        "pragma",
        "sourceMap",
        "autoLabel",
        "labelFormat",
        "instances"
      ]);
    return {
      plugins: [
        [
          pragmatic,
          { export: "jsx", module: "@emotion/core", import: pragmaName }
        ],
        [
          jsx,
          _objectAssign(
            { pragma: pragmaName, pragmaFrag: "React.Fragment" },
            options
          )
        ],
        [
          emotion,
          {
            sourceMap: sourceMap,
            autoLabel: autoLabel,
            labelFormat: labelFormat,
            instances: instances,
            cssPropOptimization: !0
          }
        ]
      ]
    };
  };
exports.default = index;
