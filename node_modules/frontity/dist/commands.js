#! /usr/bin/env node
"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tsNode = __importStar(require("ts-node"));
tsNode.register({
    transpileOnly: true
});
const commander_1 = __importDefault(require("commander"));
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const actions_1 = require("./actions");
const { version } = JSON.parse(fs_extra_1.readFileSync(path_1.resolve(__dirname, "../package.json"), { encoding: "utf8" }));
// Sets the version and the description of the program.
commander_1.default.version(version).description("Frontity CLI");
// Registers a `create` command that takes an optional
// parameter called `name`. It also accepts the following
// options: --typescript, --use-cwd.
commander_1.default
    .command("create [name]")
    .option("-t, --typescript", "Adds support for TypeScript")
    .option("-c, --use-cwd", "Generates the project in the current directory.")
    .description("Creates a new Frontity project.")
    .action(actions_1.create);
commander_1.default
    .command("create-package [name]")
    .description("Creates a new Frontity package.")
    .action(actions_1.createPackage);
commander_1.default
    .command("dev")
    .option("-p, --production", "Builds the project for production.")
    .option("--port <port>", "Runs the server on a custom port. Default is 3000.")
    .option("-s, --https", "Runs the server using https.")
    .option("--target <target>")
    .description("Starts a server in development mode.")
    .action(actions_1.dev);
commander_1.default
    .command("build")
    .option("-d, --development", "Builds the project for development.")
    .option("--target <target>")
    .description("Builds the project for production.")
    .action(actions_1.build);
commander_1.default
    .command("serve")
    .option("--port <port>", "Runs the server on a custom port. Default is 3000.")
    .option("-s, --https", "Runs the server using https.")
    .description("Starts a server in production mode.")
    .action(actions_1.serve);
commander_1.default
    .command("subscribe <email>")
    .description("Subscribe to Frontity newsletter.")
    .action(actions_1.subscribe);
// Parses the arguments and adds them to the `command` object.
commander_1.default.parse(process.argv);
