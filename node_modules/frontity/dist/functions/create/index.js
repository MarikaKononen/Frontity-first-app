"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const steps_1 = require("./steps");
const defaultOptions = {
    path: process.cwd(),
    typescript: false,
    packages: [
    // "@frontity/wp-source"
    ],
    theme: "@frontity/mars-theme"
};
exports.default = async (passedOptions, emitter) => {
    // This functions will emit an event if an emitter is passed in options.
    const emit = (message, step) => {
        if (emitter)
            emitter.emit("create", message, step);
    };
    let options;
    let step;
    let dirExisted;
    process.on("SIGINT", async () => {
        if (typeof dirExisted !== "undefined")
            await steps_1.revertProgress(dirExisted, options);
    });
    try {
        // 1. Parses and validates options.
        options = steps_1.normalizeOptions(defaultOptions, passedOptions);
        // 2. Ensures that the project dir exists and is empty.
        step = steps_1.ensureProjectDir(options);
        emit(`Ensuring ${chalk_1.default.yellow(options.path)} directory.`, step);
        dirExisted = await step;
        // 3. Creates `package.json`.
        step = steps_1.createPackageJson(options);
        emit(`Creating ${chalk_1.default.yellow("package.json")}.`, step);
        await step;
        // 4. Creates `frontity.settings`.
        const extension = options.typescript ? "ts" : "js";
        step = steps_1.createFrontitySettings(extension, options);
        emit(`Creating ${chalk_1.default.yellow(`frontity.settings.${extension}`)}.`, step);
        await step;
        // 5. Clones `@frontity/mars-theme` inside `packages`.
        step = steps_1.cloneStarterTheme(options);
        emit(`Cloning ${chalk_1.default.green(options.theme)}.`, step);
        await step;
        // 6. Installs dependencies.
        step = steps_1.installDependencies(options);
        emit(`Installing dependencies.`, step);
        await step;
        // 7. Download favicon.
        step = steps_1.downloadFavicon(options);
        emit(`Downloading ${chalk_1.default.yellow("favicon.ico")}.`, step);
        await step;
    }
    catch (error) {
        if (typeof dirExisted !== "undefined")
            await steps_1.revertProgress(dirExisted, options);
        if (emitter)
            emitter.emit("error", error);
        else
            throw error;
    }
};
