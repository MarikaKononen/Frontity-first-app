"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const ora_1 = __importDefault(require("ora"));
const chalk_1 = __importDefault(require("chalk"));
const inquirer_1 = require("inquirer");
const create_1 = __importDefault(require("../functions/create"));
const subscribe_1 = __importDefault(require("../functions/subscribe"));
const utils_1 = require("../utils");
const events_1 = require("events");
exports.default = async (name, { typescript, useCwd }) => {
    const options = {};
    if (!name) {
        const questions = [
            {
                name: "name",
                type: "input",
                message: "Enter a name for the project:",
                default: "my-frontity-project"
            },
            {
                name: "theme",
                type: "input",
                message: "Enter a starter theme to clone:",
                default: "@frontity/mars-theme"
            }
        ];
        const answers = await inquirer_1.prompt(questions);
        options.name = answers.name;
        options.theme = answers.theme;
        console.log();
    }
    else {
        options.name = name;
    }
    options.typescript = typescript;
    options.path = useCwd ? process.cwd() : path_1.resolve(process.cwd(), options.name);
    const emitter = new events_1.EventEmitter();
    emitter.on("error", utils_1.errorLogger);
    emitter.on("create", (message, action) => {
        if (action)
            ora_1.default.promise(action, message);
        else
            console.log(message);
    });
    await create_1.default(options, emitter);
    console.log(chalk_1.default.bold("\nFrontity project created.\n"));
    const subscribeQuestions = [
        {
            name: "subscribe",
            type: "confirm",
            message: "Do you want to receive framework updates by email?",
            default: false
        },
        {
            name: "email",
            type: "input",
            message: "Please, enter your email:",
            when: answers => answers.subscribe
        }
    ];
    const answers = await inquirer_1.prompt(subscribeQuestions);
    if (answers.subscribe) {
        console.log();
        emitter.on("subscribe", (message, action) => {
            if (action)
                ora_1.default.promise(action, message);
            else
                console.log(message);
        });
        await subscribe_1.default(answers.email, emitter);
        console.log("\nThanks for subscribing! ðŸ˜ƒ");
    }
    else {
        console.log(`\nOk, that's fine! ðŸ˜‰\nYou can subscribe at any point with ${chalk_1.default.bold.green("npx frontity subscribe <email>")}.`);
    }
    console.log(`\nRun ${chalk_1.default.bold.green(`cd ${options.name} && npx frontity dev`)} and have fun! ðŸŽ‰\n\nYou can find docs at ${chalk_1.default.underline.magenta("https://docs.frontity.org/")}.\nIf you have any doubts, join our community at ${chalk_1.default.underline.magenta("https://community.frontity.org/")}.\n`);
};
